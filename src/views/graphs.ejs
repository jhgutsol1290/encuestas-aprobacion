<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Encuestas de aprobación</title>
    <%- include("partials/header")%>
    <link href= "/assets/css/graphs.css" rel="stylesheet">
    <!--CDN CHARTJS-->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
</head>

<div class="container-fluid mt-5">
    <div class="mt-5" style="width:90%;">
        <canvas id="canvas"></canvas>
    </div>
</div>

<%- include("partials/footer")%>
<script>
//obtaining data
const data = <%- newData %>
console.log(data)

//dataLabels = Encuestadora, this is for the upside labels
const dataLabels = data.map(el=>el.encuestadora)
//console.log(dataLabels)

//aux works as a auxiliar variable in order to get the array generated in NuevaTabla from data
const aux = data.map(el=>el.NuevaTabla)
console.log(aux)

//allLabels is for the dates in x axis
const allLabels = aux[0].map(el=>el.publicado)
//console.log(allLabels)

//values0 attemps the values of the first dataLabel
//const values0 = aux[0].map(el=>el.porcentaje)
//console.log(values0)
//var values

	//for(i=0;i<aux.length;i++){
	///values = aux[i]
	//console.log(values)
	//}

//const values0 = aux[0].map(el=>el.porcentaje)
//const values1 = aux[1].map(el=>el.porcentaje)
//const values2 = aux[2].map(el=>el.porcentaje)

const arreglo = []

for(var b in data){
	var c = data[b]
	arreglo.push({"encuestadora": c.encuestadora, "porcentaje": [ aux[b] ]})
}

console.log(arreglo)

const aux1 = arreglo.map((el,i)=>{
	return [arreglo[i].encuestadora, arreglo[i].porcentaje[0].map(el=>el.porcentaje)]
})
console.log(aux1)

var newArray=[]

newArray = aux1.map((el,i)=>{
	return {
		"label": aux1[i][0],
		"borderColor": '#4592af',
		"backgroundColor": '#4592af',
		"fill": false,
		"data": aux1[i][1]
	}
})

console.log(newArray)



var lineChartData = {
			labels: allLabels,
			datasets: newArray,
		};

		window.onload = function() {
			var ctx = document.getElementById('canvas').getContext('2d');
			window.myLine = Chart.Line(ctx, {
				data: lineChartData,
				options: {
					responsive: true,
					hoverMode: 'index',
					stacked: false,
					title: {
						display: true,
						text: 'Encuestas de aprobación Presidente Andrés Manuel López Obrador'
					},
					scales: {
						yAxes: [{
							type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
							display: true,
							position: 'left',
                        }],
					}
				}
			});
		};

		

/* var ctx = document.getElementById('myChart').getContext('2d');
    var chart = new Chart(ctx, {
    // The type of chart we want to create
    type: 'line',

    // The data for our dataset
    data: {
        labels: aux3,
        datasets: [{
            label: dataLabels[0],
            borderColor: 'rgb(255, 99, 132)',
            data: values1
        },
        {
            label: dataLabels[1],
            borderColor: 'rgb(255, 99, 132)',
            data: [64,80]
        },
        {
            label: dataLabels[2],
            borderColor: 'rgb(255, 99, 132)',
            data: [64,80]
        },
    ]
    },

    // Configuration options go here
    options: {
        responsive: true,
				title: {
					display: true,
					text: 'Chart.js Line Chart - Stacked Area'
				},
				tooltips: {
					mode: 'index',
				},
				hover: {
					mode: 'index'
				},
				scales: {
					xAxes: [{
						scaleLabel: {
							display: true,
							labelString: 'Month'
						}
					}],
					yAxes: [{
						stacked: true,
						scaleLabel: {
							display: true,
							labelString: 'Value'
						}
					}]
				}
    }
}); */
</script>